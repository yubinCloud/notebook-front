"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[82],{1050:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-c3987056",path:"/base/es6-modeule-and-async/",title:"ES6 模块化与异步编程",lang:"zh-CN",frontmatter:{title:"ES6 模块化与异步编程",permalink:"/base/es6-modeule-and-async",date:"2022/03/16"},excerpt:"",headers:[{level:2,title:"1. ES6 模块化",slug:"_1-es6-模块化",children:[{level:3,title:"1.1 前端的模块化规范",slug:"_1-1-前端的模块化规范",children:[]},{level:3,title:"1.2 ES6 的模块化规范",slug:"_1-2-es6-的模块化规范",children:[]},{level:3,title:"1.3 ES6 模块化的基本语法",slug:"_1-3-es6-模块化的基本语法",children:[]}]},{level:2,title:"2. Promise",slug:"_2-promise",children:[{level:3,title:"2.1 Promise 基本概念",slug:"_2-1-promise-基本概念",children:[]},{level:3,title:"2.2 读取文件示例",slug:"_2-2-读取文件示例",children:[]},{level:3,title:"2.3 Promise.all() 方法",slug:"_2-3-promise-all-方法",children:[]},{level:3,title:"2.4 Promise.race() 方法",slug:"_2-4-promise-race-方法",children:[]},{level:3,title:"2.5 基于 Promise 封装读文件的方法",slug:"_2-5-基于-promise-封装读文件的方法",children:[]}]},{level:2,title:"3. async / await",slug:"_3-async-await",children:[]},{level:2,title:"4. EventLoop",slug:"_4-eventloop",children:[{level:3,title:"4.1 同步任务与异步任务",slug:"_4-1-同步任务与异步任务",children:[]},{level:3,title:"4.2 同步任务和异步任务的执行过程",slug:"_4-2-同步任务和异步任务的执行过程",children:[]},{level:3,title:"4.3 EventLoop 基本概念",slug:"_4-3-eventloop-基本概念",children:[]}]},{level:2,title:"5. 宏任务和微任务",slug:"_5-宏任务和微任务",children:[]}],git:{createdTime:1647426198e3,updatedTime:164784284e4,contributors:[{name:"yubinCloud",email:"yubin_SkyWalker@yeah.net",commits:8}]},filePathRelative:"docs/base/JavaScript/ES6 模块化与异步编程.md"}},9642:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(6252);const t=(0,p.uE)('<h2 id="_1-es6-模块化" tabindex="-1"><a class="header-anchor" href="#_1-es6-模块化" aria-hidden="true">#</a> 1. ES6 模块化</h2><h3 id="_1-1-前端的模块化规范" tabindex="-1"><a class="header-anchor" href="#_1-1-前端的模块化规范" aria-hidden="true">#</a> 1.1 前端的模块化规范</h3><p>在 ES6 模块化规范诞生之前，JavaScript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范。但是，这些由社区提出的模块化标准，还是存在一定的差异性与局限性，<strong>并不是浏览器与服务器通用的模块化标准</strong>，例如：</p><ul><li>AMD 和 CMD 适用于浏览器端的 Javascript 模块化 【已废弃】</li><li>CommonJS 适用于服务器端的 Javascript 模块化</li></ul><blockquote><p>node.js 遵循了 <strong>CommonJS</strong> 的模块化规范。其中：</p><ul><li>导入其它模块使用 <code>require()</code> 方法</li><li>模块对外共享成员使用 <code>module.exports</code> 对象</li></ul></blockquote><p>太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，<strong>大一统的 ES6 模块化</strong>规范诞生了！</p><h3 id="_1-2-es6-的模块化规范" tabindex="-1"><a class="header-anchor" href="#_1-2-es6-的模块化规范" aria-hidden="true">#</a> 1.2 ES6 的模块化规范</h3><p>ES6 模块化规范是浏览器端与服务器端<strong>通用的模块化开发规范</strong>。ES6 模块化规范中定义：</p><ul><li>每个 js 文件都是一个独立的模块</li><li>导入其它模块成员使用 <strong>import</strong> 关键字</li><li>向外共享模块成员使用 <strong>export</strong> 关键字</li></ul><blockquote><p><strong>如何在 node.js 中体验 ES6 模块化</strong>？<u>node.js 中默认仅支持 CommonJS 模块化规范</u>，若想基于 node.js 体验与学习 ES6 的模块化语法，可以按照如下两个步骤进行配置：</p><ol><li>确保安装了 v14.15.1 或更高版本的 node.js</li><li>在 package.json 的根节点中添加 <code>&quot;type&quot;: &quot;module&quot;</code> 节点</li></ol></blockquote><h3 id="_1-3-es6-模块化的基本语法" tabindex="-1"><a class="header-anchor" href="#_1-3-es6-模块化的基本语法" aria-hidden="true">#</a> 1.3 ES6 模块化的基本语法</h3><p>ES6 的模块化主要包含如下 3 种用法：</p><ol><li>默认导出与默认导入</li><li>按需导出与按需导入</li><li>直接导入并执行模块中的代码</li></ol><h4 id="_1-3-1-默认导出与默认导入" tabindex="-1"><a class="header-anchor" href="#_1-3-1-默认导出与默认导入" aria-hidden="true">#</a> 1.3.1 默认导出与默认导入</h4><p><strong>默认导出</strong>语法：<code>export default 默认导出的成员</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">let</span> n2 <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  n1<span class="token punctuation">,</span>\n  show\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>每个模块中，<u>只允许使用唯一的一次 export default</u>，否则会报错！</li></ul><p><strong>默认导入</strong>语法：<code> import 接收名称 from &#39;模块标识符&#39;</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 从 &#39;默认导出.js&#39; 模块中导入 export default 向外共享的成员</span>\n<span class="token comment">// 并使用 m1 进行接收</span>\n<span class="token keyword">import</span> m1 <span class="token keyword">from</span> <span class="token string">&#39;./默认导出.js&#39;</span>\n\n<span class="token comment">// 打印结果： `{ n1: 10, show: [Function: show]}`</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>默认导入时的<u>接收名称可以任意名称</u>，只要是合法的成员名称即可</li></ul><h4 id="_1-3-2-按需导出与按需导入" tabindex="-1"><a class="header-anchor" href="#_1-3-2-按需导出与按需导入" aria-hidden="true">#</a> 1.3.2 按需导出与按需导入</h4><p><strong>按需导出</strong>语法： <code>export 按需导出的成员</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string">&#39;ccc&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>按需导入</strong>语法： <code>import { s1 } from &#39;模块标识符’</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> say <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./按需导出.js&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',25),e=(0,p._)("div",{class:"custom-container warning"},[(0,p._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,p._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,p._)("circle",{cx:"12",cy:"12",r:"9"}),(0,p._)("path",{d:"M12 8v4"}),(0,p._)("path",{d:"M12 16h.01"})])]),(0,p._)("p",{class:"custom-container-title"},"注意事项"),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Uk)("每个模块中可以使用"),(0,p._)("strong",null,"多次"),(0,p.Uk)("按需导出")]),(0,p._)("li",null,[(0,p.Uk)("按需"),(0,p._)("strong",null,"导入的成员名称"),(0,p.Uk)("必须和按需"),(0,p._)("strong",null,"导出的名称"),(0,p.Uk)("保持"),(0,p._)("strong",null,"一致")]),(0,p._)("li",null,[(0,p.Uk)("按需导入时，可以使用 "),(0,p._)("strong",null,"as 关键字"),(0,p.Uk)("进行重命名")]),(0,p._)("li",null,"按需导入可以和默认导入一起使用")])],-1),o=(0,p.uE)('<h4 id="_1-3-3-直接导入并执行模块中的代码" tabindex="-1"><a class="header-anchor" href="#_1-3-3-直接导入并执行模块中的代码" aria-hidden="true">#</a> 1.3.3 直接导入并执行模块中的代码</h4><p>如果<strong>只想单纯地执行某个模块中的代码</strong>，并不需要得到模块中向外共享的成员。此时，可以直接导入并执行模块代码，示例代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 直接导入并执行该模块的代码，并不需要得到模块向外共享的成员</span>\n<span class="token keyword">import</span> <span class="token string">&#39;./something.js&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_2-promise" tabindex="-1"><a class="header-anchor" href="#_2-promise" aria-hidden="true">#</a> 2. Promise</h2><p>多层回调函数的相互嵌套，就形成了<strong>回调地狱</strong>：</p><img src="https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220316185535927.png" alt="image-20220316185535927" style="zoom:67%;"><ul><li>代码耦合性太强，难以维护</li><li>大量冗余的代码相互嵌套，代码的可读性变差</li></ul><p>为了解决回调地狱的问题，ES6（ECMAScript 2015）中新增了 <strong>Promise</strong> 的概念。</p><h3 id="_2-1-promise-基本概念" tabindex="-1"><a class="header-anchor" href="#_2-1-promise-基本概念" aria-hidden="true">#</a> 2.1 Promise 基本概念</h3><p><strong>Promise 是一个构造函数</strong></p><ul><li>我们可以创建 Promise 的实例：<code>const p = new Promise()</code></li><li>new 出来的 Promise 实例对象，<strong>代表一个异步操作</strong></li></ul><p><strong>Promise.prototype 上包含一个 .then() 方法</strong></p><ul><li>每一次 new Promise() 构造函数得到的实例对象，都可以通过原型链的方式访问到 .then() 方法，例如 <code>p.then()</code></li></ul><p><strong>.then() 方法用来预先指定成功和失败的回调函数</strong></p><ul><li><code>p.then(成功的回调函数，失败的回调函数)</code></li><li><code> p.then(result =&gt; { }, error =&gt; { })</code></li><li>调用 .then() 方法时，<u>成功的回调函数是必选的</u>、失败的回调函数是可选的</li></ul><h3 id="_2-2-读取文件示例" tabindex="-1"><a class="header-anchor" href="#_2-2-读取文件示例" aria-hidden="true">#</a> 2.2 读取文件示例</h3><h4 id="_2-2-1-then-fs-的基本使用" tabindex="-1"><a class="header-anchor" href="#_2-2-1-then-fs-的基本使用" aria-hidden="true">#</a> 2.2.1 then-fs 的基本使用</h4><p>由于 node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式。因此，需要先运行如下的命令，安装 <strong>then-fs</strong> 这个第三方包，从而支持我们基于 Promise 的方式读取文件的内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> then-fs\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>调用 then-fs 提供的 <code>readFile()</code> 方法，可以异步地读取文件的内容，它的返回值是 Promise 的实例对象。因此可以调用 <code>.then()</code> 方法为每个 Promise 异步操作指定成功和失败之后的回调函数。示例代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>  <span class="token comment">// 从第三方库中导入 thenFs</span>\n\nthenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/1.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nthenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/2.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nthenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/3.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意，<strong>上述的代码无法保证文件的读取顺序</strong>，需要做进一步的改进！</p><h4 id="_2-2-2-基于-promise-按顺序读取文件的内容" tabindex="-1"><a class="header-anchor" href="#_2-2-2-基于-promise-按顺序读取文件的内容" aria-hidden="true">#</a> 2.2.2 基于 Promise 按顺序读取文件的内容</h4><p><strong>.then 方法的特性</strong>：如果上一个 .then() 方法中<strong>返回了一个新的 Promise 实例</strong>对象，则可以通过下一个 .then() 继续进行处理。通过 .then() 方法的<strong>链式调用</strong>，就解决了回调地狱的问题。</p><p>Promise 支持链式调用，从而来解决回调地狱的问题。示例代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>\n\nthenFs\n  <span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/11.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/2.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/3.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_2-2-3-通过-catch-捕获错误" tabindex="-1"><a class="header-anchor" href="#_2-2-3-通过-catch-捕获错误" aria-hidden="true">#</a> 2.2.3 通过 .catch 捕获错误</h4><p>在 Promise 的链式操作中如果发生了错误，可以使用 <code>Promise.prototype.catch</code> 方法进行捕获和处理：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>\n\nthenFs\n  <span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/1.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/2.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/3.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>当读取 <code>1.txt</code> 发生失败后，错误会被 <code>.catch</code> 捕获并处理，之后再调用后面的 <code>then</code> 方法</li></ul><h3 id="_2-3-promise-all-方法" tabindex="-1"><a class="header-anchor" href="#_2-3-promise-all-方法" aria-hidden="true">#</a> 2.3 <code>Promise.all()</code> 方法</h3><p><code>Promise.all()</code> 方法会发起并行的 Promise 异步操作，<strong>等所有的异步操作全部结束后</strong>才会执行下一步的 .then 操作（等待机制）。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>\n\n<span class="token keyword">const</span> promiseArr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/3.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/2.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/1.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promiseArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>注意：数组中 Promise 实例的顺序，就是最终结果的顺序！</li></ul><h3 id="_2-4-promise-race-方法" tabindex="-1"><a class="header-anchor" href="#_2-4-promise-race-方法" aria-hidden="true">#</a> 2.4 <code>Promise.race()</code> 方法</h3><p><code>Promise.race()</code> 方法会发起并行的 Promise 异步操作，<strong>只要任何一个异步操作完成，就立即执行下一步的 .then 操作</strong>（赛跑机制）。示例代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>\n\n<span class="token keyword">const</span> promiseArr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/3.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/2.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/1.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>promiseArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2-5-基于-promise-封装读文件的方法" tabindex="-1"><a class="header-anchor" href="#_2-5-基于-promise-封装读文件的方法" aria-hidden="true">#</a> 2.5 基于 Promise 封装读文件的方法</h3><p>方法的封装要求：</p><ol><li>方法的名称要定义为 <code>getFile</code></li><li>方法接收一个<strong>形参 fpath</strong>，表示要读取的文件的路径</li><li>方法的<strong>返回值</strong>为 Promise 实例对象</li></ol><p>其基本定义如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token parameter">fpath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 方法的返回值为 Promise 的实例对象</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>new Promise()</code> 只是创建了一个形式上的异步操作。</li></ul><h4 id="_2-5-1-创建具体的异步操作" tabindex="-1"><a class="header-anchor" href="#_2-5-1-创建具体的异步操作" aria-hidden="true">#</a> 2.5.1 创建具体的异步操作</h4><p>如果想要创建具体的异步操作，则需要在 <code>new Promise()</code> 构造函数期间，<strong>传递一个 function 函数，将具体的异步操作定义到 function 函数内部</strong>。示例代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token parameter">fpath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-5-2-获取-then-的两个实参" tabindex="-1"><a class="header-anchor" href="#_2-5-2-获取-then-的两个实参" aria-hidden="true">#</a> 2.5.2 获取 .then 的两个实参</h4><p>通过 <code>.then()</code> 指定的成功和失败的回调函数，可以在 function 的<strong>形参中</strong>进行接收，示例代码如下：</p><p><img src="https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220320143725613.png" alt="image-20220320143725613"></p><p>Promise 异步操作的结果，可以调用 resolve 或 reject 回调函数进行处理。示例代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token parameter">fpath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>至此，我们的封装完成了，现在我们测试一下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/11.txt&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3-async-await" tabindex="-1"><a class="header-anchor" href="#_3-async-await" aria-hidden="true">#</a> 3. async / await</h2><p>async/await 是 ES8（ECMAScript 2017）引入的新语法，用来<strong>简化 Promise 异步操作</strong>。</p><blockquote><p><code>.then</code> 链式调用解决了回调地狱的问题，但也有代码冗余、阅读性差、 不易理解的缺点。</p></blockquote><p>使用 async/await 简化 Promise 异步操作的示例代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/1.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> r2 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/2.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> r3 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/3.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>使用<strong>注意事项</strong>：</p><ul><li>如果在 function 中使用了 await，则 function <strong>必须</strong>被 async 修饰</li><li>在 async 方法中，<strong>第一个 await 之前的代码会同步执行</strong>，await <strong>之后的代码会异步执行</strong>，参考该示例：</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/1.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> r2 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/2.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> r3 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/3.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>执行结果为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>A\nB\nC\n111 222 333\nD\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>原因是首先执行 <code>console.log(&#39;A&#39;)</code>，然后调用 <code>getAllFile()</code>，该函数在第一个 await 之前是同步执行，因此执行 <code>console.log(&#39;B&#39;)</code> ，而后后面的代码需要异步执行，因此主线程退出该函数的执行，先去执行 <code>console.log(&#39;C&#39;)</code>，当异步操作执行完毕后，便继续执行了剩下的两个打印操作。</p><h2 id="_4-eventloop" tabindex="-1"><a class="header-anchor" href="#_4-eventloop" aria-hidden="true">#</a> 4. EventLoop</h2><h3 id="_4-1-同步任务与异步任务" tabindex="-1"><a class="header-anchor" href="#_4-1-同步任务与异步任务" aria-hidden="true">#</a> 4.1 同步任务与异步任务</h3><p>JavaScript 是一门单线程执行的编程语言。也就是说，同一时间只能做一件事情。</p><p><img src="https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220320163659215.png" alt="image-20220320163659215"></p><p>单线程执行任务队列的问题： 如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致<strong>程序假死的问题</strong>。</p><p>为了防止某个耗时任务导致程序假死的问题，JavaScript 把待执行的任务分为了两类：</p><ol><li>同步任务（synchronous） <ul><li>又叫做非耗时任务，指的是在主线程上排队执行的那些任务</li><li>只有前一个任务执行完毕，才能执行后一个任务</li></ul></li><li>异步任务（asynchronous） <ul><li>又叫做耗时任务，异步任务由 JavaScript <strong>委托给宿主环境</strong>进行执行</li><li>当异步任务执行完成后，会通知 JavaScript 主线程执行异步任务的回调函数</li></ul></li></ol><h3 id="_4-2-同步任务和异步任务的执行过程" tabindex="-1"><a class="header-anchor" href="#_4-2-同步任务和异步任务的执行过程" aria-hidden="true">#</a> 4.2 同步任务和异步任务的执行过程</h3><img src="https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220320164328594.png" alt="image-20220320164328594" style="zoom:80%;"><ol><li>同步任务由 JavaScript 主线程次序执行</li><li>异步任务<strong>委托给</strong>宿主环境执行</li><li>已完成的异步任务<strong>对应的回调函数</strong>，会被<strong>加入到任务队列中</strong>等待执行</li><li>JavaScript 主线程的<strong>执行栈被清空后</strong>，会读取任务队列中的回调函数，次序执行</li><li>JavaScript 主线程不断重复上面的第 4 步</li></ol><h3 id="_4-3-eventloop-基本概念" tabindex="-1"><a class="header-anchor" href="#_4-3-eventloop-基本概念" aria-hidden="true">#</a> 4.3 EventLoop 基本概念</h3><p>JavaScript 主线程<strong>从“任务队列”中读取</strong>异步任务的回调函数，<strong>放到执行栈中</strong>依次执行。这 个过程是循环不断的，所以整个的这种运行机制又称为 <strong>EventLoop</strong>（事件循环）。</p><p>结合 EventLoop 分析输出的顺序：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>\nthenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/1.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">dataStr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>正确结果：ADCB，原因：</p><ul><li>A 和 D 属于同步任务，会根据代码的先后顺序依次被执行</li><li>C 和 B 属于异步任务。它们的回调函数会被加入到任务队列中，等待主线程空闲时再执行</li></ul><h2 id="_5-宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#_5-宏任务和微任务" aria-hidden="true">#</a> 5. 宏任务和微任务</h2><p>JavaScript 把异步任务又做了进一步的划分，异步任务又分为两类：</p><ol><li><strong>宏任务</strong>（macrotask） <ul><li>异步 Ajax 请求</li><li>setTimeout、setInterval</li><li>文件操作</li><li>其它宏任务</li></ul></li><li><strong>微任务</strong>（microtask） <ul><li>Promise.then、.catch 和 .finally</li><li>process.nextTick</li><li>其它微任务</li></ul></li></ol><p>宏任务和微任务的<strong>执行顺序</strong>：每一个宏任务执行完之后，都会检查是否存在待执行的微任务，如果有，则执行完所有微任务之后，再继续执行下一个宏任务。</p>',84),c=(0,p._)("div",{class:"custom-container tip"},[(0,p._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,p._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,p._)("circle",{cx:"12",cy:"12",r:"9"}),(0,p._)("path",{d:"M12 8h.01"}),(0,p._)("path",{d:"M11 12h1v4h1"})])]),(0,p._)("p",{class:"custom-container-title"},"面试题"),(0,p._)("p",null,"分析以下代码输出的顺序："),(0,p._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p._)("pre",{class:"language-javascript"},[(0,p._)("code",null,[(0,p._)("span",{class:"token function"},"setTimeout"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    console"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'1'"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)("\n\n"),(0,p._)("span",{class:"token keyword"},"new"),(0,p.Uk)(),(0,p._)("span",{class:"token class-name"},"Promise"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token parameter"},"resolve"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    console"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'2'"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token function"},"resolve"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"then"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token keyword"},"function"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)(),(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    console"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'3'"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)("\n\nconsole"),(0,p._)("span",{class:"token punctuation"},"."),(0,p._)("span",{class:"token function"},"log"),(0,p._)("span",{class:"token punctuation"},"("),(0,p._)("span",{class:"token string"},"'4'"),(0,p._)("span",{class:"token punctuation"},")"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"7"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"8"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"9"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"10"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"11"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"12"),(0,p._)("br")])]),(0,p._)("p",null,"正确输出顺序：2431"),(0,p._)("p",null,"分析："),(0,p._)("ul",null,[(0,p._)("li",null,"先执行所有的同步任务：第 6 和 12 行"),(0,p._)("li",null,"再执行微任务：第 9 行"),(0,p._)("li",null,"再执行下一个宏任务：第 2 行")])],-1),l={},i=(0,a(3744).Z)(l,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c],64)}]])}}]);